
package com.optum.rqns.services.medicareEligiblity2Test;

/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

import java.io.File;
import java.net.MalformedURLException;
import java.net.URL;
import java.sql.ResultSet;

import javax.xml.namespace.QName;

import com.optum.rqns.services.utils.DataBaseConnect;
import com.optum.rqns.services.utils.Utility;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.xml.bind.annotation.XmlSeeAlso;

/**
 * This class was generated by Apache CXF 2.7.18
 * 2017-08-07T15:16:28.831+05:30
 * Generated source version: 2.7.18
 * 
 */
public final class MemberEligibilityServicev2_MemberEligibilityServiceImplv2Port_Client {

    private static final QName SERVICE_NAME = new QName("http://services.rqns.optum.com/", "memberEligibilityServicev2");

    public MemberEligibilityServicev2_MemberEligibilityServiceImplv2Port_Client() {
    }

    public  String medicaidMeberEligiblity2() throws java.lang.Exception {
    	
        URL wsdlURL = MemberEligibilityServicev2_Service.WSDL_LOCATION;
        String hic="";
        String sStrtDt="";
        String sEndDt="";
        String sReturn="";
        String scontrNbr="";
    	String subplnId="";
    	String sSysCode="";
    	String sPrntGuid="";
        MemberEligibilityServicev2_Service ss = new MemberEligibilityServicev2_Service(wsdlURL, SERVICE_NAME);
        MemberEligibilityServicev2 port = ss.getMemberEligibilityServiceImplv2Port();  
        
        {
        	   String sRequest="select hic_nbr,pay_adj_strt_dt,pay_adj_end_dt,contr_nbr,sub_plan_id,sys_cd,par_clnt_guid from  cms_mmr_rstd_elig_sts st, vw_cs_clnt_guid_mod vw where vw.clnt_guid=st.par_clnt_guid and vw.ins_catg_cd='MR'";
               System.out.println("Invoking getEligibleMembers...");
               System.out.println(sRequest);
               ResultSet rs=DataBaseConnect.getRsList("TEST", sRequest);
               int iCount=0;
               while (rs.next()){
               	hic=rs.getString(1);
               	sStrtDt=rs.getString(2);
               	sEndDt=rs.getString(3);
               	scontrNbr=rs.getString(4);
               	subplnId=rs.getString(5);
               	sPrntGuid=rs.getString(7);
               	break;
               }
        System.out.println("Invoking getEligibleMembers...");
        System.out.println(hic);
        System.out.println(Utility.formatDateForService(sStrtDt));
        System.out.println(Utility.formatDateForService(sEndDt));
        com.optum.rqns.services.medicareEligiblity2Test.GetEligibleMembers _getEligibleMembers_getEligibleMembers = new com.optum.rqns.services.medicareEligiblity2Test.GetEligibleMembers();
        _getEligibleMembers_getEligibleMembers.setMemberHIC(hic);
        _getEligibleMembers_getEligibleMembers.setRangeStrtDt(Utility.formatDateForService(sStrtDt));
        _getEligibleMembers_getEligibleMembers.setRangeEndDt(Utility.formatDateForService(sEndDt));
        com.optum.rqns.services.medicareEligiblity2Test.ServiceMetaData _getEligibleMembers_getEligibleMembersMetaData = new com.optum.rqns.services.medicareEligiblity2Test.ServiceMetaData();
        _getEligibleMembers_getEligibleMembersMetaData.setAppId("9032afa9f3e34e6fd0e05e967be021f7");
        _getEligibleMembers_getEligibleMembers.setMetaData(_getEligibleMembers_getEligibleMembersMetaData);
        try {
            com.optum.rqns.services.medicareEligiblity2Test.GetEligibleMembersResponsev2 _getEligibleMembers__return = port.getEligibleMembers(_getEligibleMembers_getEligibleMembers);
            System.out.println("getEligibleMembers.result=" + _getEligibleMembers__return);
            System.out.println("response");
            System.out.println(_getEligibleMembers__return.memberEligibilityInfov2.memberHicHistoryList.memberHicHistoryv2.get(0).toString());
            MemberHicHistoryv2 oRecord = _getEligibleMembers__return.memberEligibilityInfov2.memberHicHistoryList.memberHicHistoryv2.get(0);
            if (Utility.formatDateForService(sStrtDt).equals(oRecord.enrlStrtDt) &&
            		Utility.formatDateForService(sEndDt).equals(oRecord.enrlEndDt) &&
            		hic.equals(oRecord.hicNumber) &&
            		scontrNbr.equals(oRecord.contrNbr) &&
            		subplnId.equals(oRecord.subPlnId) &&
            		sPrntGuid.equals(oRecord.parClntGuid))
      
					{
						
			
            	sReturn="getEligibleMembers2  --------Passed:-------";
            	
            	 sReturn=sReturn+" ************************Request******************************************";
            	sReturn=sReturn+ " Hic number- " + hic;
            	sReturn=sReturn+ " Start date:- " +sStrtDt;
            	sReturn=sReturn+ " End Date:- " +sEndDt;
            	
            	
            
            	
            	sReturn=sReturn+"************************Response******************************************";
            	sReturn=sReturn+ " Hic number- " + oRecord.hicNumber;
            	sReturn=sReturn+ " Start date:- " +oRecord.enrlStrtDt;
            	sReturn=sReturn+ " End Date:- " +oRecord.enrlEndDt;
            	sReturn=sReturn+ " Contract Number- " + oRecord.contrNbr;
            	sReturn=sReturn+ "Source:- " +oRecord.eligibilitySource;
            	sReturn=sReturn+ " Parent GUID:- " +oRecord.parClntGuid;
            
            	
            }
            else
            {
            	sReturn="getEligibleMembers2  --------Failed:-------";
            	
           	 sReturn=sReturn+" ************************Request******************************************";
         	sReturn=sReturn+ " Hic number- " + hic;
         	sReturn=sReturn+ " Start date:- " +sStrtDt;
         	sReturn=sReturn+ " End Date:- " +sEndDt;
         	
         	
         
         	
         	sReturn=sReturn+"************************Response******************************************";
         	sReturn=sReturn+ " Hic number- " + oRecord.hicNumber;
         	sReturn=sReturn+ " Start date:- " +oRecord.enrlStrtDt;
         	sReturn=sReturn+ " End Date:- " +oRecord.enrlEndDt;
         	sReturn=sReturn+ " Contract Number- " + oRecord.contrNbr;
         	sReturn=sReturn+ "Source:- " +oRecord.eligibilitySource;
         	sReturn=sReturn+ " Parent GUID:- " +oRecord.parClntGuid;
         
            }

        } catch (ServiceException_Exception e) { 
            System.out.println("Expected exception: ServiceException has occurred.");
            System.out.println(e.toString());
            sReturn="Service failed msg:" + e.getMessage()+ " with request  "+ hic+"----" + "start date "+ Utility.formatDateForService(sStrtDt) + "--------end date  " +Utility.formatDateForService(sEndDt);
        }
        catch(Exception e)
        {
        	 sReturn="Service failed msg:" + e.getMessage()+ " with request  "+ hic+"----" + "start date "+ Utility.formatDateForService(sStrtDt) + "--------end date  " +Utility.formatDateForService(sEndDt);
        }
            }

       // System.exit(0);
		return sReturn;
    }

}
