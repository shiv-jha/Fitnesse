
package com.optum.rqns.services.gapTest;

/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

import java.io.File;
import java.net.MalformedURLException;
import java.net.URL;
import java.sql.ResultSet;

import javax.xml.namespace.QName;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;

import com.optum.rqns.services.utils.DataBaseConnect;

/**
 * This class was generated by Apache CXF 2.7.18
 * 2017-08-02T12:46:32.315+05:30
 * Generated source version: 2.7.18
 * 
 */
public final class GapStatusInfoService_GapStatusInfoServiceImplPort_Client {

 
    private static final QName SERVICE_NAME = new QName("http://services.rqns.optum.com/", "GapStatusInfoServiceImpl");
    private static com.optum.rqns.services.gapTest.GapStatusInfo _addGapStatusInfo_gapStatusInfo=null;

    public GapStatusInfoService_GapStatusInfoServiceImplPort_Client() {
    }

    public  String gapService() throws java.lang.Exception {

    	String sRandomId;
    
    	
        URL wsdlURL = GapStatusInfoServiceImpl.WSDL_LOCATION;
        
      
        GapStatusInfoServiceImpl ss = new GapStatusInfoServiceImpl(wsdlURL, SERVICE_NAME);
        GapStatusInfoService port = ss.getGapStatusInfoServiceImplPort();  
        
        {
        sRandomId=DataBaseConnect.makeIdUsingTime("yyyyMMddHHmmss");
        System.out.println("Invoking addGapStatusInfo...");
        com.optum.rqns.services.gapTest.ServiceMetaData _addGapStatusInfo_serviceMetaData = new com.optum.rqns.services.gapTest.ServiceMetaData();
        _addGapStatusInfo_serviceMetaData.setAppId("9032afa9f3e34e6fd0e05e967be021f7");
      
        
         _addGapStatusInfo_gapStatusInfo = new com.optum.rqns.services.gapTest.GapStatusInfo();
        _addGapStatusInfo_gapStatusInfo.setClntGuid("ClntGuid-417224663");
        _addGapStatusInfo_gapStatusInfo.setSubGapId("SubGap"+sRandomId);
        _addGapStatusInfo_gapStatusInfo.setGapId("Gap"+sRandomId);
        _addGapStatusInfo_gapStatusInfo.setActionDate("20170702153601");
        _addGapStatusInfo_gapStatusInfo.setActionResult("ActionResult23144405");
        _addGapStatusInfo_gapStatusInfo.setStatus("Status212554100");
        _addGapStatusInfo_gapStatusInfo.setStatusSrc("StatusSrc-1591297267");
        _addGapStatusInfo_gapStatusInfo.setSrcRecId("SrcRecId2049413217");
        _addGapStatusInfo_gapStatusInfo.setSrcRecIdTyp("SrcRecIdTyp-1515122527");
        _addGapStatusInfo_gapStatusInfo.setStatusChgUser("StatusChgUser1624323465");
        _addGapStatusInfo_gapStatusInfo.setSbstncProvId("SbstncProvId1818000072");
        javax.xml.ws.Holder<java.lang.Integer> _addGapStatusInfo_responseCode = new javax.xml.ws.Holder<java.lang.Integer>();
        javax.xml.ws.Holder<java.lang.String> _addGapStatusInfo_responseMessage = new javax.xml.ws.Holder<java.lang.String>();
        try {
            port.addGapStatusInfo(_addGapStatusInfo_serviceMetaData, _addGapStatusInfo_gapStatusInfo, _addGapStatusInfo_responseCode, _addGapStatusInfo_responseMessage);

            System.out.println("addGapStatusInfo._addGapStatusInfo_responseCode=" + _addGapStatusInfo_responseCode.value);
            System.out.println("addGapStatusInfo._addGapStatusInfo_responseMessage=" + _addGapStatusInfo_responseMessage.value);
        } catch (Exception e) { 
            System.out.println("Expected exception: ServiceException has occurred.");
            System.out.println(e.toString());
           // e.printStackTrace();
        }
            }
        ResultSet rs=DataBaseConnect.getRsList("TEST-DW", "select count(*) from A_MBR_RVW_RSLT where GAP_ID='"+"Gap"+sRandomId+"'");
        int iCount=0;
         while (rs.next()){
         	iCount = rs.getInt(1);
         }
         
         if (iCount==1)
         {
         	ResultSet rs1=DataBaseConnect.getRsList("TEST-DW", "select * from A_MBR_RVW_RSLT where GAP_ID='"+"Gap"+sRandomId+"'");
         	 while (rs1.next()){
         /*	Verify.verifyEqual(_addGapStatusInfo_gapStatusInfo.getActionDate(), rs1.getDate("STS_ACT_DT").toString());
         	Verify.verifyEqual(_addGapStatusInfo_gapStatusInfo.getActionResult(), rs1.getString("SUB_STS_ACT_RSLT"));
         	Verify.verifyEqual(_addGapStatusInfo_gapStatusInfo.getClntGuid(), rs1.getString("CLNT_GUID"));
         	Verify.verifyEqual(_addGapStatusInfo_gapStatusInfo.getGapId(), rs1.getString("GAP_ID"));
         	Verify.verifyEqual(_addGapStatusInfo_gapStatusInfo.getSbstncProvId(), rs1.getString("SBSTNC_PROV_ID"));
         	Verify.verifyEqual(_addGapStatusInfo_gapStatusInfo.getSrcRecId(), rs1.getString("SRC_REC_ID"));
         	Verify.verifyEqual(_addGapStatusInfo_gapStatusInfo.getSrcRecIdTyp(), rs1.getString("SRC_REC_ID_TYP"));
         	Verify.verifyEqual(_addGapStatusInfo_gapStatusInfo.getStatus(), rs1.getString("STS"));
         	Verify.verifyEqual(_addGapStatusInfo_gapStatusInfo.getStatusChgUser(), rs1.getString("STS_CHG_USR"));
         	Verify.verifyEqual(_addGapStatusInfo_gapStatusInfo.getStatusSrc(), rs1.getString("STS_SRC"));
         
         	Verify.verifyEqual(_addGapStatusInfo_gapStatusInfo.getSubGapId(), rs1.getString("SUB_GAP_ID"));
   */
         
         	 }
         }
         else
         {
         	System.out.println("No record inserted with Gap id:"+ "Gap"+sRandomId);
         }
         
         System.out.println("Record count is"+ iCount);
         return "Record inserted in A_MBR_RVW_RSLT table with Gap ID-- Gap"+sRandomId;
         //System.exit(0);
     }
     
    

}
